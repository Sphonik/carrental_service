from spyne import Application, rpc, ServiceBase, Float, Unicode
		from		spyne.	protocol.soap import Soap11
		from		spyne.	server.wsgi import WsgiApplication
		from		spyne.	model.fault import Fault
		import	requests
		from		lxml	import etree
		from		datetime import datetime, time
		import	pytz

		class 
CurrencyConverterService(ServiceBase):
#Klassenattribute für das Caching
_cached_rates = None
_last_update = None
_cache_valid = False
_timeout = 5
_update_hour = 16
#EZB Update-Zeit

@ staticmethod
def _should_update_cache():
if not CurrencyConverterService._cached_rates or not CurrencyConverterService._last_update:
return True

#Aktuelle Zeit in CET
tz = pytz.timezone('Europe/Vienna')
	now = datetime.now(tz)
	last_update = CurrencyConverterService._last_update.astimezone(tz)
	update_time = time(CurrencyConverterService._update_hour, 0)
#Cache aktualisieren wenn:
#1. Es ist ein neuer Tag
	if last_update.date()
<now.date():
		return True

#2. Es ist nach 16:00 CET und der letzte Update war vor 16:00 am selben Tag
		if (now.time() >= update_time and
		    last_update.time() < update_time and
		    last_update.date() == now.date())
	:
			return True

#3. Es ist nach 16:00 und wir haben heute noch keine Daten geholt
			if now.time()
		>=update_time and last_update.date() < now.date():
				return True

				return False

				@ staticmethod
		def get_exchange_rates():
		try:
				if CurrencyConverterService._should_update_cache()
			:
					url = 'http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml'
					response = requests.get(url, timeout = CurrencyConverterService._timeout)
#Optimierte XML-Verarbeitung
					tree = etree.fromstring(response.content, parser = etree.XMLParser(remove_blank_text = True))
					rates =
{
cube.get('currency'):float           (cube.get('rate'))
for		cube	in	tree.xpath('//ns:Cube/ns:Cube/ns:Cube',
					namespaces = {'ns':'http://www.ecb.int/vocabulary/2002-08-01/eurofxref'})
}
CurrencyConverterService._cached_rates = rates
CurrencyConverterService._last_update = datetime.now(pytz.UTC)
return CurrencyConverterService._cached_rates

except requests.RequestException as e:
if CurrencyConverterService._cached_rates:
return CurrencyConverterService._cached_rates
raise

@ rpc(Float, Unicode, _returns = Float)
def convert_currency(ctx, amount, to_currency):
if amount < 0:
raise 
Fault(faultstring = "Betrag darf nicht negativ sein")
try:
	rates = CurrencyConverterService.get_exchange_rates()
	to_currency = to_currency.upper()
#Optimierte Konvertierungslogik
if to_currency == 'USD':
	return amount

	usd_rate = 1 / rates.get('USD', 1)
#Cached USD Rate

if to_currency == 'EUR':
		return amount * usd_rate

		rate = rates.get(to_currency)
	if rate is None:
			raise Fault(faultstring = f "Nicht unterstützte Währung: {to_currency}")
				return amount * usd_rate * rate

		except requests.RequestException:
				raise Fault(faultstring = "Fehler beim Abrufen der Wechselkurse")
				application = Application([CurrencyConverterService],
					    tns = 'spyne.examples.currency',
				   in_protocol = Soap11(validator = 'lxml'),
						    out_protocol = Soap11())
		if __name__ == '__main__':
				from wsgiref.simple_server import make_server
				wsgi_app = WsgiApplication(application)
					server = make_server('0.0.0.0', 8000, wsgi_app)
					print("Listening on port 8000...")
